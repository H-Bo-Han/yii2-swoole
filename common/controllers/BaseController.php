<?php
/**
 * 控制器基类，主要进行请求日志记录和数据封装
 * User: lusc
 * Date: 2016/5/17
 * Time: 14:59
 */

namespace common\controllers;

use common\helpers\Trace;
use swoole\SwooleServer;
use yii\web\Controller;

class BaseController extends Controller
{

    /**
     * @var boolean whether to enable CSRF validation for the actions in this controller.
     * CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
     */
    public $enableCsrfValidation = false;
    /**
     * @var string 指定返回给客户端的数据格式，支持JSON,JSONP,XML,RAW,HTML
     */
    public $outContentType = 'json';

    protected $requestBegin = null;
    public function init()
    {
        if (defined('IN_SWOOLE') && IN_SWOOLE) {
            SwooleServer::$swooleApp->currentSwooleResponse->header('Access-Control-Allow-Origin', '*');
            SwooleServer::$swooleApp->currentSwooleResponse->header('Access-Control-Allow-Credentials', 'true');
        } else {
            header('Access-Control-Allow-Origin:*');
            header('Access-Control-Allow-Credentials:true');
        }
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * action 执行前回调
     * @param \yii\base\Action $action
     */
    public function beforeAction($action)
    {
        $this->requestBegin               = microtime(true) * 1000;
        \Yii::$app->getResponse()->format = $this->outContentType;
        $this->logRequest();
        return parent::beforeAction($action);
    }

    /**
     * action执行后回调
     * @param \yii\base\Action $action
     * @param mixed $result
     * @return mixed
     */
    public function afterAction($action, $result)
    {
        \Yii::$app->getResponse()->format = $this->outContentType;
        $traceId                          = '';
        if (defined('IN_SWOOLE') && IN_SWOOLE) {
            $traceId = SwooleServer::$swooleApp->logTraceId;
        } else {
            defined('YII_TRACK_ID') or define('YII_TRACK_ID', md5(microtime(true) . rand(0, 10000)));
            $traceId = YII_TRACK_ID;
        }
        if (is_array($result) && isset($result['errno'])) {
            $newResult = [
                'error'   => [
                    'returnCode'        => $result['errno'] == 200 ? 0 : $result['errno'],
                    'returnMessage'     => $result['msg'],
                    'returnUserMessage' => $result['msg'],
                ],
                'traceId' => $traceId,
                'data'    => isset($result['data']) ? $result['data'] : null,
            ];
            $result = $newResult;
            unset($newResult);
        }
        $this->logResponse($result);
        return parent::afterAction($action, $result); // TODO: Change the autogenerated stub
    }

    /**
     * 记录请求
     */
    public function logRequest()
    {
        Trace::addLog('controller_request_begin', [
            'post'   => \Yii::$app->getRequest()->post(),
            'get'    => \Yii::$app->getRequest()->get(),
            'server' => $_SERVER,
            'header' => \Yii::$app->getRequest()->getHeaders(),
        ], $this->id . '_' . $this->action->id);
    }

    /**
     * 记录输出日志
     * @param $content
     */
    public function logResponse($content)
    {
        $elapsed = microtime(true) * 1000 - $this->requestBegin;
        Trace::addLog('controller_request_end', [
            'post'    => \Yii::$app->getRequest()->post(),
            'get'     => \Yii::$app->getRequest()->get(),
            'server'  => $_SERVER,
            'header'  => \Yii::$app->getRequest()->getHeaders(),
            'content' => $content,
            'elapsed' => floatval($elapsed),
        ], $this->id . '_' . $this->action->id);
    }
}
